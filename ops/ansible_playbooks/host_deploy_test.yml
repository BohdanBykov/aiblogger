---
  - name: deploy on ubuntu22.04 server
    hosts: vm
    become: yes

    tasks:
      - name: Apt update/install
        block:
        - name: apt update
          ansible.builtin.apt:
            update_cache: yes
            force_apt_get: yes

        - name: apt get install nginx, mysql-server, curl, python
          ansible.builtin.apt:
            pkg: 
              - nginx
              - mysql-server
              - curl
              - python3
              - python3-pip
              - python3-virtualenv

      - name: Prepare /srv/aiblogger dir
        block:
        - name: clone aiblogger repo
          ansible.builtin.git:
            repo: https://github.com/BohdanBykov/aiblogger.git
            dest: /srv/aiblogger/
            version: dev

        - name: create virtualenv
          ansible.builtin.pip:
            requirements: /srv/aiblogger/requirements.txt
            virtualenv: /srv/aiblogger/env

      - name: Set up mysql server
        block:
        - name: start mysql
          ansible.builtin.systemd:
            name: mysql
            state: started
            enabled: yes

        # package that ansible will use
        - name: pip install 
          ansible.builtin.pip:
            name: PyMySQL

        - name: make mysql root accesible by password ''
          shell: mysql -uroot -e 'UPDATE mysql.user SET plugin="mysql_native_password" WHERE user="root" AND host="localhost";'

        - name: update changes
          shell: mysql -uroot -e 'FLUSH PRIVILEGES'

        - name: set mysql root password
          mysql_user:
            login_user: root
            login_password: ''
            name: root
            password: '{{ mysql_root }}'
        
        - name: 
          community.mysql.mysql_query:
            login_user: root
            login_password: '{{ mysql_root }}'
            query:
            - CREATE DATABASE site_db
            - CREATE USER 'site'@'localhost' IDENTIFIED BY 'password'
            - GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES ON `site_db`.`post` TO `site`@`localhost`
            - GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES ON `site_db`.`user` TO `site`@`localhost`
            

        - name: Initialize db
          ansible.builtin.shell: sudo /srv/aiblogger/env/bin/flask --app '/srv/aiblogger/flaskr' init-db

      - name: Set up gunicorn service
        block:
        - name: copy gunicorn socket
          ansible.builtin.copy:
            src: /srv/aiblogger/ops/configs/gunicorn.socket
            dest: /etc/systemd/system/
            remote_src: yes

        - name: copy gunicorn service
          ansible.builtin.copy:
            src: /srv/aiblogger/ops/configs/gunicorn.service
            dest: /etc/systemd/system/
            remote_src: yes

        - name: start gunicorn service
          ansible.builtin.systemd:
            name: gunicorn.socket
            state: started
            enabled: yes

        - name: trying to reach gunicorn socket
          ansible.builtin.uri:
            unix_socket: /run/gunicorn.sock
            url: http://127.0.0.1/
            return_content: yes
       
      - name: Set up nginx
        block:
        - name: copy nginx config
          ansible.builtin.copy:
            src: /srv/aiblogger/ops/configs/host_nginx.conf
            dest: /etc/nginx/nginx.conf
            force: yes
            remote_src: yes

        - name: reload nginx
          ansible.builtin.systemd:
            enabled: yes
            state: restarted
            daemon_reload: yes
            name: nginx

      - name: get response from aiblogger site
        shell: curl localhost
        register: aiblogger_index
          
      - debug: var=aiblogger_index.stdout_lines



